/* autogenerated by Processing revision 1293 on 2024-03-15 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class sketch_PSO extends PApplet {

// PSO de acuerdo a Talbi (p.247 ss)

PImage surf; // imagen que entrega el fitness

// ===============================================================
int puntos = 100;
Particle[] fl; // arreglo de partículas
float d = 15; // radio del círculo, solo para despliegue
float gbestx, gbesty, gbest; // posición y fitness del mejor global
float w = 1000; // inercia: baja (~50): explotación, alta (~5000): exploración (2000 ok)
float C1 = 30, C2 =  10; // learning factors (C1: own, C2: social) (ok)
int evals = 0, evals_to_best = 0; //número de evaluaciones, sólo para despliegue
float maxv = 3; // max velocidad (modulo)

class Particle{
	float x, y, fit; // current position(x-vector)  and fitness (x-fitness)
	float px, py, pfit; // position (p-vector) and fitness (p-fitness) of best solution found by particle so far
	float vx, vy; //vector de avance (v-vector)
	
	// ---------------------------- Constructor
	Particle(){
		x = random (width); y = random(height);
		vx = random(-1,1) ; vy = random(-1,1);
		pfit = -1; fit = -1; //asumiendo que no hay valores menores a -1 en la función de evaluación
	}
	
	// ---------------------------- Evalúa partícula
	public float Eval(PImage surf){ //recibe imagen que define función de fitness
		evals++;
		int c=surf.get(PApplet.parseInt(x),PApplet.parseInt(y)); // obtiene color de la imagen en posición (x,y)
		fit = red(c); //evalúa por el valor de la componente roja de la imagen
		if(fit > pfit){ // actualiza local best si es mejor
			pfit = fit;
			px = x;
			py = y;
		}
		if (fit > gbest){ // actualiza global best
			gbest = fit;
			gbestx = x;
			gbesty = y;
			evals_to_best = evals;
			println(str(gbest));
		};
		return fit; //retorna la componente roja
	}
	
	// ------------------------------ mueve la partícula
	public void move(){
		//actualiza velocidad (fórmula con factores de aprendizaje C1 y C2)
		//vx = vx + random(0,1)*C1*(px - x) + random(0,1)*C2*(gbestx - x);
		//vy = vy + random(0,1)*C1*(py - y) + random(0,1)*C2*(gbesty - y);
		//actualiza velocidad (fórmula con inercia, p.250)
		vx = w * vx + random(0,1)*(px - x) + random(0,1)*(gbestx - x);
		vy = w * vy + random(0,1)*(py - y) + random(0,1)*(gbesty - y);
		//actualiza velocidad (fórmula mezclada)
		//vx = w * vx + random(0,1)*C1*(px - x) + random(0,1)*C2*(gbestx - x);
		//vy = w * vy + random(0,1)*C1*(py - y) + random(0,1)*C2*(gbesty - y);
		// trunca velocidad a maxv
		float modu = sqrt(vx*vx + vy*vy);
		if (modu > maxv){
			vx = vx/modu*maxv;
			vy = vy/modu*maxv;
		}
		// update position
		x = x + vx;
		y = y + vy;
		// rebota en murallas
		if (x > width || x < 0) vx = - vx;
		if (y > height || y < 0) vy = - vy;
	}
	
	// ------------------------------ despliega partícula
	public void display(){
		int c=surf.get(PApplet.parseInt(x),PApplet.parseInt(y)); 
		fill(c);
		ellipse (x,y,d,d);
		// dibuja vector
		stroke(0xFFFF0000);
		line(x,y,x-10*vx,y-10*vy);
	}
} //fin de la definición de la clase Particle


// dibuja punto azul en la mejor posición y despliega números
public void despliegaBest(){
	fill(0xFF0000FF);
	ellipse(gbestx,gbesty,d,d);
	PFont f = createFont("Arial",16,true);
	textFont(f,15);
	fill(0xFF00FF00);
	text("Best fitness: "+str(gbest)+"\nEvals to best: "+str(evals_to_best)+"\nEvals: "+str(evals),10,20);
}

// ===============================================================

public void setup(){  
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//size(1440,720); //setea width y height
	//surf = loadImage("marscyl2.jpg");
	
	/* size commented out by preprocessor */; //setea width y height (de acuerdo al tamaño de la imagen)
	surf = loadImage("Moon_LRO_LOLA_global_LDEM_1024_b.jpg");
	
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	/* smooth commented out by preprocessor */;
	// crea arreglo de objetos partículas
	fl = new Particle[puntos];
	for(int i =0;i<puntos;i++)
		fl[i] = new Particle();
}

public void draw(){
	//background(200);
	//despliega mapa, posiciones  y otros
	image(surf,0,0);
	for(int i = 0;i<puntos;i++){
		fl[i].display();
	}
	despliegaBest();
	//mueve puntos
	for(int i = 0;i<puntos;i++){
		fl[i].move();
		fl[i].Eval(surf);
	}
	
}


  public void settings() { size(1024, 512);
smooth(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "sketch_PSO" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
